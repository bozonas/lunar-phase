{"version":3,"sources":["MoonDatePicker.tsx","MoonInfo.tsx","MainMoonImage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["customTheme","createMuiTheme","palette","primary","main","LunarDatePicker","props","theme","utils","DateFnsUtils","style","maxWidth","DatePicker","autoOk","variant","openTo","value","date","onChange","onDateChange","TableRow","width","align","color","fieldName","fieldValue","MoonInfo","useState","moonInfo","setMoonInfo","useEffect","fetch","imageNo","then","res","json","parseTimeFromNumber","input","sign","Math","abs","hours","floor","reminder","mins","secs","round","format","time","phase","age","undefined","days","hour","getAgeInDays","diameter","distance","ra","getRa","j2000","dec","getDec","subsolar","lon","lat","subearth","posangle","MainMoonImage","className","src","alt","App","Date","changeDate","imgNo","currentDate","januaryOne","UTC","getUTCFullYear","getTime","getImageNo","Grid","container","justify","spacing","item","lg","md","newDate","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bae389e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nexport interface LunarDatePickerProps {\r\n  date: Date,\r\n  onDateChange: (newDate: Date | null) => void\r\n}\r\n\r\nconst customTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#424242',\r\n    },\r\n  },\r\n})\r\n\r\nconst LunarDatePicker = (props: LunarDatePickerProps) => {\r\n  return (\r\n    <div>\r\n      <MuiThemeProvider theme={customTheme}>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils} >\r\n          <div style={{ maxWidth: \"100px\" }}>\r\n            <DatePicker\r\n              autoOk\r\n              variant=\"static\"\r\n              openTo=\"date\"\r\n              value={props.date}\r\n              onChange={props.onDateChange}\r\n            />\r\n          </div>\r\n        </MuiPickersUtilsProvider>\r\n      </MuiThemeProvider>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default LunarDatePicker;","import React, { useState, useEffect } from \"react\";\r\nimport Moment from 'react-moment';\r\n\r\nexport interface MoonInfoProps {\r\n  imageNo: number\r\n}\r\n\r\ninterface MoonInfo {\r\n  time: Date,\r\n  phase: string,\r\n  age: number,\r\n  diameter: number,\r\n  distance: number,\r\n  j2000: J2000,\r\n  subsolar: Subsolar,\r\n  subearth: Subearth,\r\n  posangle: number\r\n}\r\n\r\ninterface J2000 {\r\n  ra: number,\r\n  dec: number\r\n}\r\n\r\ninterface Subsolar {\r\n  lon: number,\r\n  lat: number\r\n}\r\n\r\ninterface Subearth {\r\n  lon: number,\r\n  lat: number\r\n}\r\n\r\nconst MoonInfo = (props: MoonInfoProps) => {\r\n  const [moonInfo, setMoonInfo] = useState<MoonInfo | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetch(`mooninfo/mooninfo.${props.imageNo}.json`)\r\n      .then(res => res.json() as Promise<MoonInfo>)\r\n      .then(res => {\r\n        setMoonInfo(res)\r\n      });\r\n  }, [props.imageNo]);\r\n\r\n  const getAgeInDays = (age: number | undefined) : string => {\r\n    if (age === undefined)\r\n      return \"\";\r\n    let days = Math.floor(age);\r\n    let reminder = age%1;\r\n    let hour = Math.floor(reminder*24);\r\n    reminder = reminder*24%1;\r\n    let mins = Math.round(reminder*60);\r\n\r\n    return `${days}d ${hour}h ${mins}m`;\r\n  }\r\n\r\n  const getRa = (ra: number | undefined) : string => {\r\n    if (ra === undefined)\r\n      return \"\";\r\n    let {hours, mins, secs} = parseTimeFromNumber(ra);\r\n    return `${hours}h ${mins}m ${secs}s`;\r\n  }\r\n\r\n  const getDec = (dec: number | undefined) : string => {\r\n    if (dec === undefined)\r\n      return \"\";\r\n    let {hours, mins, secs} = parseTimeFromNumber(dec);\r\n    return `${hours}° ${mins}' ${secs}''`;\r\n  }\r\n\r\n  const parseTimeFromNumber = (input: number) : \r\n    {hours: number, mins: number, secs: number} => {\r\n    let sign = 1;\r\n    if (input < 0)\r\n      sign = -1;\r\n    input = Math.abs(input);\r\n    \r\n    let hours = Math.floor(input)*sign;\r\n    let reminder = input%1;\r\n    let mins = Math.floor(reminder*60);\r\n    reminder = reminder*60%1;\r\n    let secs = Math.round(reminder*60);\r\n    return {hours, mins, secs};\r\n  }\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <TableRow fieldName=\"Time\" fieldValue={<Moment format=\"YYYY-MM-DD HH:mm\">{moonInfo?.time}</Moment>}/>\r\n        <TableRow fieldName=\"Phase\" fieldValue={`${moonInfo?.phase}% (${getAgeInDays(moonInfo?.age)})`}/>\r\n        <TableRow fieldName=\"Diameter\" fieldValue={`${moonInfo?.diameter} arcseconds`}/>\r\n        <TableRow fieldName=\"Distance\" fieldValue={`${moonInfo?.distance} km (30.98 Earth diameters)`}/>\r\n        <TableRow fieldName=\"J2000 Right Ascension, Declination\" fieldValue={`${getRa(moonInfo?.j2000.ra)} ${getDec(moonInfo?.j2000.dec)}`}/>\r\n        <TableRow fieldName=\"Subsolar Longitude, Latitude\" fieldValue={`${moonInfo?.subsolar.lon}° ${moonInfo?.subsolar.lat}°`}/>\r\n        <TableRow fieldName=\"Sub-Earth Longitude, Latitude\" fieldValue={`${moonInfo?.subearth.lon}° ${moonInfo?.subearth.lat}°`}/>\r\n        <TableRow fieldName=\"Position Angle\" fieldValue={`${moonInfo?.posangle}°`}/>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\ninterface TableRow {\r\n  fieldName: string,\r\n  fieldValue: any\r\n}\r\n\r\nconst TableRow = (props: TableRow) => {\r\n  return (\r\n  <tr>\r\n    <td width='50%' align='right' style={{ color: \"white\" }}><b>{props.fieldName}: </b></td>\r\n    <td/>\r\n    <td align='left' style={{ color: \"white\" }}>{props.fieldValue}</td>\r\n  </tr>\r\n  );\r\n}\r\n\r\nexport default MoonInfo;\r\n","import React from \"react\";\r\n\r\nconst rootImgPath: string = \"https://svs.gsfc.nasa.gov/vis/a000000/a004700/a004768/frames/730x730_1x1_30p/\";\r\n\r\nexport interface MainMoonImageProps {\r\n  imageNo: number\r\n}\r\n\r\nconst MainMoonImage = (props: MainMoonImageProps) => {\r\n\r\n  return (\r\n    <div className='moon_image_container'>\r\n      <img className='moon_image' src={`${rootImgPath}moon.${props.imageNo}.jpg`} alt=\"\"></img>\r\n      <img className='moon_image' src={`https://svs.gsfc.nasa.gov/vis/a000000/a004700/a004768/frames/5760x3240_16x9_30p/labels/label.${props.imageNo}.png`} alt=\"\"></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainMoonImage;","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport LunarDatePicker from './MoonDatePicker';\nimport MoonInfo from './MoonInfo';\nimport MainMoonImage from './MainMoonImage';\nimport './App.css';\n\n\nfunction App() {\n  const [date, changeDate] = useState(new Date());\n\n  let handleDateChange = (newDate: Date | null): void => {\n    changeDate(newDate!);\n  }\n\n  let imgNo = getImageNo(date);\n\n  return (\n    <div className=\"App\">\n      <Grid container\n        justify=\"center\"\n        spacing={0}>\n        <Grid item lg={3} md={12}>\n          <LunarDatePicker date={date} onDateChange={handleDateChange} />\n        </Grid>\n        <Grid item lg={6} md={12}>\n          <MainMoonImage imageNo={imgNo} />\n        </Grid>\n        <Grid item lg={3} md={12} style={{paddingTop: \"20px\"}}>\n          <MoonInfo imageNo={imgNo} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction getImageNo(currentDate: Date): number {\n  let januaryOne = Date.UTC(currentDate.getUTCFullYear(), 0, 1, 0, 0, 0);\n  let imageNo = 1 + Math.round((currentDate.getTime() - januaryOne) / 3600000.0);\n  return imageNo;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}